from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from photo_frame import FrameSettings, FrameProcessor

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ—Ç TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

settings = FrameSettings()
processor = FrameProcessor(settings)

# –¶–≤–µ—Ç–∞
COLOR_CHOICES = {
    "üî¥ –ö—Ä–∞—Å–Ω—ã–π": "red",
    "üü¢ –ó–µ–ª—ë–Ω—ã–π": "green",
    "üîµ –°–∏–Ω–∏–π": "blue",
    "‚ö´ –ß—ë—Ä–Ω—ã–π": "black",
    "‚ö™ –ë–µ–ª—ã–π": "white",
    "üü° –ñ—ë–ª—Ç—ã–π": "yellow",
    "üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π": "purple",
    "üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π": "brown",
}

# –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
THICKNESS_CHOICES = {
    "5%": "5%",
    "10%": "10%",
    "15%": "15%",
    "20%": "20%",
    "30%": "30%",
}

# –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
ASPECT_CHOICES = {
    "1:1 (square)": "square",
    "4:5 (portrait)": "portrait",
    "9:16 (story)": "story",
    "16:9 (landscape)": "landscape",
}

# –ö–∞—á–µ—Å—Ç–≤–æ
QUALITY_CHOICES = {
    "üü¢ 95 (–º–∞–∫—Å)": 95,
    "üü° 85": 85,
    "üî¥ 70 (—ç–∫–æ–Ω–æ–º)": 70,
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_kb(options, prefix):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=label, callback_data=f"{prefix}:{value}")]
            for label, value in options.items()
        ]
    )


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∏ —è –¥–æ–±–∞–≤–ª—é –∫ –Ω–µ–º—É —Ä–∞–º–∫—É.\n"
        "–¢—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üé® –¶–≤–µ—Ç —Ä–∞–º–∫–∏", callback_data="menu:color")],
                [InlineKeyboardButton(text="üß± –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏", callback_data="menu:thickness")],
                [InlineKeyboardButton(text="üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", callback_data="menu:aspect")],
                [InlineKeyboardButton(text="üì∏ –ö–∞—á–µ—Å—Ç–≤–æ JPG", callback_data="menu:quality")],
            ]
        ),
    )


# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("setcolor"))
async def cmd_setcolor(message: Message, command: CommandObject):
    color = command.args
    if not color:
        await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π `/setcolor <—Ü–≤–µ—Ç>` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/setcolor gold`)", parse_mode="Markdown")
        return

    try:
        settings.border_color = color
        await message.reply(f"‚úÖ –¶–≤–µ—Ç —Ä–∞–º–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{color}`", parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ü–≤–µ—Ç–∞: {e}")


# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data.startswith("menu:"))
async def open_menu(callback: CallbackQuery):
    menu = callback.data.split(":")[1]
    if menu == "color":
        await callback.message.edit_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ä–∞–º–∫–∏:", reply_markup=make_kb(COLOR_CHOICES, "color"))
    elif menu == "thickness":
        await callback.message.edit_text("üß± –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Ä–∞–º–∫–∏:", reply_markup=make_kb(THICKNESS_CHOICES, "thickness"))
    elif menu == "aspect":
        await callback.message.edit_text("üìê –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", reply_markup=make_kb(ASPECT_CHOICES, "aspect"))
    elif menu == "quality":
        await callback.message.edit_text("üì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ JPEG:", reply_markup=make_kb(QUALITY_CHOICES, "quality"))
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data.startswith("color:"))
async def set_color(callback: CallbackQuery):
    color = callback.data.split(":")[1]
    try:
        settings.border_color = color
        await callback.message.edit_text(f"‚úÖ –¶–≤–µ—Ç —Ä–∞–º–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{color}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ü–≤–µ—Ç–∞: {e}")
    await callback.answer()


@dp.callback_query(F.data.startswith("thickness:"))
async def set_thickness(callback: CallbackQuery):
    value = callback.data.split(":")[1]
    settings.border_thickness = value
    await callback.message.edit_text(f"‚úÖ –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <code>{value}</code>", parse_mode=ParseMode.HTML)
    await callback.answer()


@dp.callback_query(F.data.startswith("aspect:"))
async def set_aspect(callback: CallbackQuery):
    value = callback.data.split(":")[1]
    settings.aspect_ratio = value
    await callback.message.edit_text(f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <code>{value}</code>", parse_mode=ParseMode.HTML)
    await callback.answer()


@dp.callback_query(F.data.startswith("quality:"))
async def set_quality(callback: CallbackQuery):
    value = int(callback.data.split(":")[1])
    settings.quality = value
    await callback.message.edit_text(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ JPEG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <code>{value}</code>", parse_mode=ParseMode.HTML)
    await callback.answer()


# –§–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    photo_bytes = await bot.download_file(file.file_path)

    output = processor.process(photo_bytes)
    await message.reply_document(document=output, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ñ–æ—Ç–æ —Å —Ä–∞–º–∫–æ–π.")


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

