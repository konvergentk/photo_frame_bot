import asyncio
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from photo_frame import FrameSettings, process_photo

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ—Ç TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_settings = {}


def get_user_settings(user_id: int) -> FrameSettings:
    return user_settings.setdefault(user_id, FrameSettings())


def get_settings_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(text="üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ", callback_data="set_ratio")
    builder.button(text="üß± –¢–æ–ª—â–∏–Ω–∞", callback_data="set_thickness")
    builder.button(text="üé® –¶–≤–µ—Ç", callback_data="set_color")
    builder.adjust(2, 1)

    return builder.as_markup()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_settings[message.from_user.id] = FrameSettings()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∂–µ:",
        reply_markup=get_settings_keyboard(),
    )


@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)

    photo = await message.photo[-1].download(destination=bytes)
    result_io = await process_photo(photo, settings)

    await bot.send_photo(
        chat_id=user_id,
        photo=result_io,
        caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.",
        reply_markup=get_settings_keyboard()
    )


@dp.callback_query(F.data == "set_ratio")
async def choose_ratio(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for label in ["square", "portrait", "story", "landscape"]:
        builder.button(text=label, callback_data=f"ratio:{label}")
    builder.adjust(2, 2)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("ratio:"))
async def set_ratio(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    ratio = callback.data.split(":")[1]
    get_user_settings(user_id).aspect_ratio = ratio
    await callback.message.edit_text(
        f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {ratio}", reply_markup=get_settings_keyboard()
    )


@dp.callback_query(F.data == "set_thickness")
async def choose_thickness(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for label in ["2%", "5%", "10%", "20px", "50px", "100px"]:
        builder.button(text=label, callback_data=f"thickness:{label}")
    builder.adjust(3, 3)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–æ–ª—â–∏–Ω—É —Ä–∞–º–∫–∏:", reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("thickness:"))
async def set_thickness(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    thickness = callback.data.split(":")[1]
    get_user_settings(user_id).border_thickness = thickness
    await callback.message.edit_text(
        f"‚úÖ –¢–æ–ª—â–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {thickness}", reply_markup=get_settings_keyboard()
    )


@dp.callback_query(F.data == "set_color")
async def ask_color_input(callback: types.CallbackQuery):
    await callback.message.answer("üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ `#RRGGBB` –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, red):")


@dp.message(F.text)
async def handle_color_or_error(message: types.Message):
    text = message.text.strip()
    user_id = message.from_user.id

    if text.startswith("#") or text.lower() in {"red", "white", "black", "blue", "green", "yellow"}:
        try:
            get_user_settings(user_id).border_color = text
            await message.answer(f"‚úÖ –¶–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}", reply_markup=get_settings_keyboard())
        except Exception:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä: `#ffcc00` –∏–ª–∏ `green`")
    else:
        await message.answer("‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
